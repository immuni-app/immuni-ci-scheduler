# config.yml
# Copyright (C) 2020 Presidenza del Consiglio dei Ministri.
# Please refer to the AUTHORS file for more information.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

version: 2.1

commands:
  setup_pr_tools:
    description: Configure the pull requests environment.
    steps:
      - restore_cache:
          name: "[pr_setup] Restore Python Cache"
          keys:
            - pip-packages-v5-{{ .Branch }}-{{ checksum "poetry.lock" }}
            - pip-packages-v5-{{ .Branch }}-
            - pip-packages-v5-
      - run:
          name: "[pr_setup] Configure poetry"
          command: poetry config virtualenvs.in-project true
      - run:
          name: "[pr_setup] Install dependencies"
          command: poetry install --no-ansi
      - save_cache:
          name: "[pr_setup] Save Python Cache"
          paths:
            - .venv
          key: pip-packages-v5-{{ .Branch }}-{{ checksum "poetry.lock" }}
      - run:
          name: "[pr_setup] Activate the Python virtual environment"
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: "[pr_setup] Install danger"
          command: yarn install --dev

jobs:
  pr_check:
    docker:
      - image: cimg/python:3.10.4-node
    resource_class: small
    steps:
      - run:
          name: "[pr_check] Stop job if DANGER_GITHUB_API_TOKEN is missing"
          command: |
            if [[ -z "${DANGER_GITHUB_API_TOKEN}" ]]; then
                circleci-agent step halt
            fi
      - run:
          name: "[pr_check] Stop job if not running in PR"
          command: |
            if [[ -z "${CIRCLE_PULL_REQUEST}" ]]; then
                circleci-agent step halt
            fi
      - checkout:
          name: "[pr_check] Checkout the code"
      - setup_pr_tools
      - run:
          name: "[pr_check] Run danger"
          command: yarn danger ci

  scheduler:
    docker:
      - image: cimg/python:3.10.4-node
    resource_class: small
    steps:
      - checkout
      - run:
          name: "[scheduler] Setup project path"
          command: echo "export PROJECT_PATH=$(pwd)" >> $BASH_ENV
      - setup_pr_tools
      - run:
          name: "[scheduler] Configure scheduler"
          command: |
            mv scheduler_config.json config.json
      - run:
          name: "[scheduler] Run scheduler"
          command: |
            export REPOSITORY="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            poetry run python scheduler.py
          no_output_timeout: 120m

workflows:
  version: 2
  pr_check:
    # The cron execution and the target branch are specified by the pipeline configuration in the project settings
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - pr_check:
          context: danger
  scheduler:
    # The cron execution and the target branch are specified by the pipeline configuration in the project settings
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Scheduler", << pipeline.schedule.name >> ]
    jobs:
      - scheduler:
          context: scheduler
